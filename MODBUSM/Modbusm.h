/*
 *	MODBUS.H--definitions for MODBUS.DLL
 *
 *
 */
 
#ifndef _MODBUSAPI_ 
#define _MODBUSAPI_ 

#define	CALLESTABLISHED	1
#define CALLDISCONNECT	2

#define TCPCONNECT		3
#define TCPDISCONNECT	4

#define MAX_POINTS			128
#define MAX_USERMSG_SIZE	540
#define MAX_BUF_SIZE		520
#define MAX_BUF_SIZEX4		MAX_BUF_SIZE*4

#define MAX_COILXFER		960
#define MAX_REGXFER			128

#define DEBUG_BUFSIZE	1024
#define DEBUG_XMIT		0x0000
#define DEBUG_RCV		0x0100

#define COIL_STATUS_TYPE		1
#define INPUT_STATUS_TYPE		2
#define HOLDING_REGISTER_TYPE	3
#define INPUT_REGISTER_TYPE		4




#define MODBUSDLL_RESPONSE_MSG		0x0401
#define MODBUSDLL_TEST_TCP			0x0402
#define MODBUSDLL_PING_TIMEOUT		0x0403
#define MODBUSDLL_PINGING_STOPED	0x0404

 
typedef struct _SERIALCONFIG    
{
    DWORD	dwBaudRate;
	BYTE	bParity;			// 0=none, 1=odd, 2=even
	BYTE	bStopBits;			// 0=one, 1=onepointfive, 2=two
	BYTE	bDataBits;			// 7,8
	BOOL	handshake_RTS;		// TRUE to support output flow control based on RTS
	BOOL	handshake_DTR;		// TRUE to support output flow control based on DTR
	BYTE	RTS_Delay[2];		// RTS_Delay[0] msec delay between activation of RTS and first character transmitted.
								// RTS_Delay[1] msec delay after last character prior to dropping the RTS signal.
} SERIALCONFIG, *LPSERIALCONFIG;

typedef struct _DIALPARAMS    
{
	char	PhoneNumber[50];	// Character string containing the number to dial
	HWND	hWnd;				// Handle of the Window to receive notification messages.
	UINT	ConnectMsg;			// Windows Notification Msg generated by the DLL whenever
								// the connection is made or dropped.  On a valid CONNECT, the 
								// LParam variable in the message will contain a handle to the connection.
	WORD	Protocol;			// 0=ASCII, 1=RTU, 2=DANIELS_ASCII, 3=DANIELS_RTU 4=DDS protocol
	int		Timeout;			// Timeout, (in milleseconds), to be associated with modbus 
								// communications via this connection.
} DIALPARAMS, *LPDIALPARAMS;

typedef struct _MPABPARAMS    
{
	HWND	hWnd;				// Handle of the Window to receive notification messages.
	UINT	NotifyMsg;			// Windows Notification Msg generated by the DLL whenever
								// a modbus transaction is complete, (same as that used by HookRspNotification).
	UINT	ConnectMsg;			// Windows Notification Msg generated by the DLL whenever
								// a connection is made or dropped.
	WORD	Protocol;			// Not Used.
	int		Timeout;			// Timeout, (in milleseconds), to be associated with modbus 
								// communications via this connection.
} MBAPPARAMS, *LPMBAPPARAMS;

typedef struct _MODBUSMSG    
{
    BYTE	SlaveId;			// Modbus Slave node address (0x00-0xff)
	BYTE	CmdId;				// Protocol Commands 
	WORD	Address;			// Modbus Data address (0x0001-0xffff)
	WORD	Length;				// Number of data points, (Maximum of 128)
	DWORD	BaudRate;			// Baud Rate to send the packet (used for send baud rate to controller)

} MODBUSMSG, *LPMODBUSMSG;

typedef struct _PASSWORDPARAMS
{
    BYTE	Byte1;				// First byte of the password
	BYTE	Byte2;				// Second byte of the password
    BYTE	Byte3;				// Third byte of the password
    BYTE	Byte4;				// Fourth byte of the password
    int		Activated;			// Is encryption enabled 0/1
} PASSWORDPARAMS, *LPPASSWORDPARAMS;

// MODBUS Return Values

#define MBUS_OK				0
//							1-255 MODBUS Slave Exception Responses
#define MBUS_INVALIDH		256
#define MBUS_INPROGRESS		257
#define MBUS_INVALIDADDR	258
#define MBUS_INVALIDID		259
#define MBUS_INVALIDLEN		260
#define MBUS_INVALIDCMD		261
#define MBUS_OUTOFMEM		262
#define MBUS_TIMEOUT		263
#define MBUS_INVALIDPROTO	 264
#define	MBUS_CHECKSUM		265
#define MBUS_NOTCONNECTED	266
#define MBUS_INVALRSP		267
#define MBUS_WRITEFAIL		268
#define MBUS_SVRNOTCONN		269
#define MBUS_UNINIT			270
#define	MBUS_DEMOEXPIRED	271
#define MBUS_NOTSUPPORTED	272
#define MBUS_INVCTRADDR		273
#define MBUS_INVRESPCODE 	274
#define MBUS_BADENCRYPT		275
#define MBUS_EXCEEDS_MEMORY	300
#define MBUS_EXCEEDS_EXTENDED_MEMORY		301
#ifdef __cplusplus
extern "C" {
#endif

// PASCAL FAR replaced by WINAPI: new calling conventions

_declspec(dllexport) WORD WINAPI Get_Modbus_DLL_Revision();

_declspec(dllexport) DWORD WINAPI NumberOfLineDevices();

_declspec(dllexport) BOOL WINAPI GetLineDeviceName(DWORD dwDeviceID, LPBYTE buf, WORD BufLen);

_declspec(dllexport) HANDLE WINAPI ConnectDDS(struct in_addr	SvrIPaddr,
											  int				PortNo,
											  int				timeout,
											  LPSERIALCONFIG	pCfg,
											  WORD				DDSProtocol,
											  LPPASSWORDPARAMS  pPassword);

_declspec(dllexport) int WINAPI HookRspNotification(HANDLE		idConnect,
													HWND		hWnd,
													UINT		NotifyMsg,
													long		lEvent);

_declspec(dllexport) int WINAPI CloseConnection (HANDLE idConnect);

_declspec(dllexport) int WINAPI StartEventMode (HANDLE	idConnect);

_declspec(dllexport) int WINAPI StopEventMode (HANDLE	idConnect);

_declspec(dllexport) int WINAPI PollMODBUS (HANDLE			idConnect,
											 LPMODBUSMSG	pMsg);

_declspec(dllexport) int WINAPI WriteMODBUS (HANDLE		idConnect,
											  LPMODBUSMSG	pMsg,
											  LPWORD		pDataArray);

_declspec(dllexport) int WINAPI MODBUSResponse (HANDLE		idConnect,
												LPMODBUSMSG	pMsg,
												LPWORD		pDataArray,
												LPWORD		MaxArraySize);

_declspec(dllexport) HANDLE WINAPI DialCall (DWORD dwDeviceID, LPDIALPARAMS pDialParams);

_declspec(dllexport) void WINAPI GetCallState (char *buf, int buflen);

_declspec(dllexport) void WINAPI AbortTheCall (HANDLE idConnect);

_declspec(dllexport) int WINAPI setTimeout(HANDLE idConnect, int timeout);

_declspec(dllexport) int WINAPI setShortTimeout(int timeout);

_declspec(dllexport) int WINAPI SetOpenConnectionTimeout( int timeout);

_declspec(dllexport) int WINAPI SetCleanBuffBeforeWriting(int timeout);

_declspec(dllexport) int WINAPI setSerialCfg(HANDLE idConnect, LPSERIALCONFIG pCfg);

_declspec(dllexport) int WINAPI setPassword (HANDLE	idConnect,
											 LPPASSWORDPARAMS pPassword);

_declspec(dllexport) void WINAPI MODBUSTCPAlive (HANDLE		hWnd,
												long		msg,
												char *		strAddress,
												long		addressID,
												long		PingTimeout,
												long		WithDebug);

_declspec(dllexport) void WINAPI StopPinging(HANDLE		hWnd);
_declspec(dllexport) void WINAPI setDebugLevel(	long	debugLevel);

#ifdef __cplusplus
}
#endif


#endif	/* _MODBUSAPI_ */